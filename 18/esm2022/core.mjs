import { Scope } from 'rete';
import { createCustomElement } from '@angular/elements';
function getRenderer() {
    const elements = new WeakMap();
    return {
        get(element) {
            return elements.get(element);
        },
        mount(element, key, component, injector, props) {
            // LIMITATION: If an element is remounted with the same identifier, the component cannot be replaced
            const exists = customElements.get(key);
            if (!exists) {
                customElements.define(key, createCustomElement(component, { injector }));
            }
            const ngElement = document.createElement(key);
            Object.keys(props).forEach(key => {
                ngElement[key] = props[key];
            });
            element.appendChild(ngElement);
            elements.set(element, { key, ngElement });
        },
        update({ ngElement }, props) {
            Object.keys(props).forEach(key => {
                ngElement.ngElementStrategy.setInputValue(key, props[key]);
            });
            ngElement.ngElementStrategy.setInputValue('seed', Math.random());
        },
        unmount(element) {
            const existing = elements.get(element);
            if (existing) {
                existing.ngElement.remove();
                elements.delete(element);
            }
        }
    };
}
/**
 * Angular plugin. Renders nodes, connections and other elements using React.
 * @priority 9
 * @emits connectionpath
 * @listens render
 * @listens unmount
 */
export class AngularPlugin extends Scope {
    params;
    presets = [];
    renderer;
    owners = new WeakMap();
    /**
     * @constructor
     * @param params Plugin properties
     * @param params.injector Angular's Injector instance
     */
    constructor(params) {
        super('angular-render');
        this.params = params;
        this.renderer = getRenderer();
        this.addPipe(context => {
            if (!context || typeof context !== 'object' || !('type' in context))
                return context;
            if (context.type === 'unmount') {
                this.unmount(context.data.element);
            }
            else if (context.type === 'render') {
                if ('filled' in context.data && context.data.filled) {
                    return context;
                }
                if (this.mount(context.data.element, context)) {
                    return {
                        ...context,
                        data: {
                            ...context.data,
                            filled: true
                        }
                    };
                }
            }
            return context;
        });
    }
    setParent(scope) {
        super.setParent(scope);
        this.presets.forEach(preset => {
            if (preset.attach)
                preset.attach(this);
        });
    }
    unmount(element) {
        this.owners.delete(element);
        this.renderer.unmount(element);
    }
    mount(element, context) {
        const existing = this.renderer.get(element);
        if (existing) {
            this.presets.forEach(preset => {
                if (this.owners.get(element) !== preset)
                    return;
                const result = preset.update(context, this);
                if (result) {
                    this.renderer.update(existing, result);
                }
            });
            return true;
        }
        for (const preset of this.presets) {
            const result = preset.mount(context, this);
            if (!result)
                continue;
            const { key, component, props } = result;
            this.renderer.mount(element, key, component, this.params.injector, props);
            this.owners.set(element, preset);
            return true;
        }
        return;
    }
    /**
     * Adds a preset to the plugin.
     * @param preset Preset that can render nodes, connections and other elements.
     */
    addPreset(preset) {
        const local = preset;
        if (local.attach)
            local.attach(this);
        this.presets.push(local);
    }
}
//# sourceMappingURL=data:application/json;base64,